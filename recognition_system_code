import pandas as pd

# Load the Excel file
df = pd.read_excel('Book1.xlsx')

# Define the weights for each column
weights = {
    'cgpa': 0.3,
    'academic_performance': 0.2,
    'core_courses_performance': 0.2,
    'hackathon_participation': 0.1,
    'paper_presentations': 0.1,
    'contributions': 0.1
}

# Normalize the values in each column to a common scale (0-100)
for col in weights:
    df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min()) * 100

# Calculate the weighted sum of the normalized values for each student
df['overall_score'] = sum(df[col] * weight for col, weight in weights.items())

# Filter the DataFrame to include only 1st to 4th year students
valid_years = [1, 2, 3, 4]
df_filtered = df[df['year'].isin(valid_years)]

# Function to find the top 3 students for the entered year
def find_top_students(year):
    year_df = df_filtered[df_filtered['year'] == year]
    if not year_df.empty:  # Check if there are students in that year
        top_students = year_df.nlargest(3, 'overall_score')[['id', 'overall_score']]
        return top_students
    else:
        return None

# API endpoint to find the top 3 students
def get_top_students(year):
    top_students = find_top_students(year)
    if top_students is not None:
        return top_students.to_dict(orient='records')
    else:
        return {'error': 'No students found for the given year'}

# Example usage:
year = int(input("Enter the year: "))
result = get_top_students(year)
if 'error' in result:
    print(result['error'])
else:
    print("Top 3 students in year", year, ":")
    for i, student in enumerate(result):
        print(f"Rank {i+1}: Student ID - {student['id']}, Overall Score - {student['overall_score']:.2f}")
